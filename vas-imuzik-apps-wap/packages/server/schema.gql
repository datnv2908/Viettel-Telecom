# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Advertisement {
  id: ID!
  name: String!
  link: String
  content: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  imageUrl: String!
  item: Node
}

type ArticleArticleTranslationEdge {
  node: ArticleTranslation!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ArticleTranslation {
  id: ID!
  title: String
  description: String
  body: String
  lang: String
  slug: String
  song: Song
  image_path: String
  published_time: DateTime
  articlesRelation(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): ArticleTranslationConnection!
}

type ArticleTranslationConnection {
  pageInfo: PageInfo!
  edges: [ArticleArticleTranslationEdge!]!
  totalCount: Float!
}

type AuthenticatePayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: AuthenticateResult
}

type AuthenticateResult {
  accessToken: String!
  accessTokenExpiry: Float!
  refreshToken: String!
  refreshTokenExpiry: Float!
}

type Banner {
  id: ID!
  maxItems: Float
  fileUrl: String!
  itemId: String!
  items: [BannerItem!]!
}

type BannerItem {
  id: ID!
  publishedTime: DateTime
  wapLink: String
  itemType: String
  itemId: String
  name: String
  alterText: String
  fileUrl: String!
  item: Node
}

type BannerItemConnection {
  pageInfo: PageInfo!
  edges: [BannerItemEdge!]!
  totalCount: Float!
}

type BannerItemEdge {
  node: BannerItem!

  """Used in `before` and `after` args"""
  cursor: String!
}

type BannerPackage {
  id: ID!
  packageId: Float
  name: String!
  brandId: String
  price: String
  period: String
  note: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CallGroup {
  id: ID!
  name: String!
}

type Chart implements Node {
  id: ID!
  slug: String!
  name: String!
  songs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: SongOrderByInput
  ): SongConnection!
}

type Comment {
  id: ID!
  content: String!
  replies: [Reply!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: PublicUser
  likes: Float
  liked: Boolean
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge!]!
  totalCount: Float!
}

type CommentEdge {
  node: Comment!

  """Used in `before` and `after` args"""
  cursor: String!
}

input CommentOrderByInput {
  updatedAt: OrderByDirection
  likesNumber: OrderByDirection
}

type CommentPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: Comment
}

type ContentProvider implements Node {
  id: ID!
  group: String
  code: String!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  imageUrl: String
  songs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: SongOrderByInput
  ): SongConnection!
}

type ContentProviderConnection {
  pageInfo: PageInfo!
  edges: [ContentProviderEdge!]!
  totalCount: Float!
}

type ContentProviderDetail implements Node {
  id: ID!
  cp_group: String!
  cp_code: String!
  status: Float!
  created_at: DateTime!
  updated_at: DateTime!
}

type ContentProviderEdge {
  node: ContentProvider!

  """Used in `before` and `after` args"""
  cursor: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GenerateCaptchaPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: GenerateCaptchaResult
}

type GenerateCaptchaResult {
  data: String!
}

type Genre implements Node {
  id: ID!
  name: String!
  slug: String
  imageUrl: String
  description: String
  songs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: SongOrderByInput
  ): SongConnection!
}

type GenreConnection {
  pageInfo: PageInfo!
  edges: [GenreEdge!]!
  totalCount: Float!
}

type GenreEdge {
  node: Genre!

  """Used in `before` and `after` args"""
  cursor: String!
}

type GroupInfo {
  id: ID!
  note: String
  members: [GroupMember!]!
  usedTones: [UsedTone!]
  timeSetting: GroupTimeSetting
}

type GroupMember {
  id: ID!
  name: String!
  number: String!
}

type GroupPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: CallGroup
}

type GroupTimeSetting {
  id: ID!
  timeType: TimeType!
  startTime: String
  endTime: String
}

type HelpArticle {
  id: ID!
  title: String!
  body: String!
}

type HelpArticleCategory {
  id: ID!
  name: String!
  slug: String!
  articles: [HelpArticle!]!
}

type Member implements Node {
  id: ID!
  username: String
  fullName: String
  birthday: DateTime
  address: String
  displayMsisdn: String
  avatarUrl: String
  sex: Sex
}

type MemberPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: Member
}

type Mutation {
  authenticate(captcha: String, password: String, username: String): AuthenticatePayload!
  refreshAccessToken(refreshToken: String): AuthenticatePayload!
  logout: StringPayload!
  generateCaptcha(username: String): GenerateCaptchaPayload!
  updateProfile(fullName: String!, sex: Sex, birthday: DateTime, address: String!): MemberPayload!
  updateAvatar(extension: String!, avatar: String!): MemberPayload!
  updatePassword(currentPassword: String!, repeatPassword: String!, newPassword: String!, captcha: String!): StringPayload!
  markSpamAsSeen(seen: Boolean!, spamId: ID!): SpamPayload!
  recordSpamClick(spamId: ID!): StringPayload!
  likeSong(like: Boolean!, songId: ID!): SongPayload!
  createComment(content: String!, songId: ID!): CommentPayload!
  deleteComment(commentId: ID!): StringPayload!
  likeComment(like: Boolean!, commentId: ID!): CommentPayload!
  createReply(content: String!, commentId: ID!): ReplyPayload!
  deleteReply(replyId: ID!, commentId: ID!): StringPayload!
  likeSinger(like: Boolean!, singerId: ID!): StringPayload!
  pauseRbt: StringPayload!
  activateRbt: StringPayload!
  cancelRbt: StringPayload!
  deleteRbt(rbtCode: String!, personId: String!): StringPayload!
  registerRbt(brandId: ID!): StringPayload!
  downloadRbt(brandId: String, rbtCodes: [String!]!): StringPayload!
  giftRbt(rbtCodes: [String!]!, msisdn: String!): StringPayload!
  setReverseRbt(active: Boolean!): StringPayload!
  createRbtGroup(groupName: String!): GroupPayload!
  deleteRbtGroup(groupId: ID!): StringPayload!
  addRbtGroupMember(memberNumber: String!, memberName: String!, groupId: ID!): StringPayload!
  removeRbtGroupMember(memberNumber: String!, groupId: ID!): StringPayload!
  setRbtGroupTones(rbtCodes: [String!]!, groupId: ID!): StringPayload!
  setRbtGroupTime(endTime: DateTime, startTime: DateTime, timeType: TimeType!, groupId: ID!): StringPayload!
  registerDevice(deviceType: String!, registerId: String!): StringPayload!
  recordKeyword(keyword: String!): StringPayload!
  createRbtAvailable(song_slug: String!, time_stop: String!, time_start: String!): RbtCreationPayload!
  createRbtUnavailable(composer: String!, singerName: String!, songName: String!, file: Upload!): RbtCreationPayload!
}

type MyRbt {
  status: Float!
  name: String
  note: String
  brandId: String!
  reverse: ReverseRbt
  packageName: String!
  popup: RbtPopup
  downloads: [RbtDownload!]
  callGroups: [CallGroup!]
}

interface Node {
  id: ID!
}

type NodeConnection {
  totalCount: Float!
  pageInfo: PageInfo!
  edges: [NodeEdge!]!
}

type NodeEdge {
  node: Node

  """Used in `before` and `after` args"""
  cursor: String!
}

enum NodeType {
  USER
  CP
  GENRE
  RBT
  SINGER
  SONG
  TOPIC
}

enum OrderByDirection {
  ASC
  DESC
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

interface Payload {
  success: Boolean!
  errorCode: String
  message: String
}

type PublicUser implements Node {
  id: ID!
  fullName: String!
  imageUrl: String
}

type Query {
  me: Member
  banner(id: String!): Banner
  pageBanner(
    slug: String
    page: String!

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): BannerItemConnection
  bannerPackages: [BannerPackage!]!
  featuredList(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): BannerItemConnection
  spams(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): SpamConnection!
  activeHeadlines: [Advertisement!]!
  activePopups: [Advertisement!]!
  iCharts: [Chart!]!
  iChart(slug: String!): Chart
  hotCps: [ContentProvider!]!
  contentProvider(group: String!): ContentProvider
  contentProviders(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): ContentProviderConnection!
  genre(slug: String!): Genre
  hotGenres: [Genre!]!
  genres(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): GenreConnection!
  singer(slug: String!): Singer
  singers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): SingerConnection!
  recommendedSongs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: SongOrderByInput
  ): SongConnection!
  song(slug: String!): Song
  likedSongs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: SongOrderByInput
  ): SongConnection!
  hotTopics: [Topic!]!
  hotTop100: [Topic!]!
  topic(slug: String!): Topic
  top100s(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): TopicConnection!
  topics(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): TopicConnection!
  comment(commentId: ID!): Comment
  myRbt: MyRbt
  rbtPackages: [RbtPackage!]
  groupInfo(groupId: ID!): GroupInfo
  copyRbt(msisdn: String!): [RingBackTone!]
  helpArticleCategories: [HelpArticleCategory!]!
  helpArticleCategory(slug: String!): HelpArticleCategory
  serverSettings: ServerSettings!
  node(id: ID!): Node
  search(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    type: NodeType
    query: String!
  ): NodeConnection!
  hotKeywords: [String!]!
  article(slug: String!): ArticleTranslation
  articles(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): ArticleTranslationConnection!
  getMyToneCreation(id: String!): RingBackToneCreation
  getMyToneCreations(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): RingBackToneCreationConnection!
}

type RbtCreationPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: RingBackToneCreation
}

type RbtDownload {
  id: String!
  toneCode: String!
  toneName: String!
  singerName: String!
  price: String!
  personID: String
  availableDateTime: String!
  tone: RingBackTone
  fileUrl: String!
}

type RbtPackage implements Node {
  id: ID!
  name: String!
  brandId: String!
  period: String!
  price: String!
  note: String!
}

type RbtPopup {
  id: ID!
  brandId: String!
  title: String!
  content: String!
  note: String!
}

type Reply {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: PublicUser
}

type ReplyEdge {
  node: Reply!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ReplyPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: Reply
}

type ReverseRbt {
  id: ID!
  status: String!
  title: String!
  description: String!
}

type RingBackTone implements Node {
  id: ID!
  name: String!
  price: Float!
  toneCode: String!
  availableAt: DateTime
  orderTimes: Float!
  singerName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  contentProvider: ContentProvider
  song: Song
  duration: Float
  fileUrl: String
}

type RingBackToneCreation implements Node {
  id: ID!
  type_creation: Float
  song_id: Float!
  tone_name: String
  tone_name_generation: String
  singer_name: String!
  slug: String!
  cp_id: Float!
  msisdn: String!
  member_id: String!
  duration: Float!
  tone_price: Float!
  tone_code: String!
  tone_id: Float!
  available_datetime: DateTime
  tone_status: Float!
  local_file: String
  ftp_file: String!
  updated_at: DateTime!
  created_at: DateTime!
  song: Song
  contentProvider: ContentProvider
  tone: RingBackTone
}

type RingBackToneCreationConnection {
  pageInfo: PageInfo!
  edges: [RingBackToneCreationEdge!]!
  totalCount: Float!
}

type RingBackToneCreationEdge {
  node: RingBackToneCreation!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ServerSettings {
  serviceNumber: String!
  isForceUpdate: Boolean!
  clientAutoPlay: Boolean!
  msisdnRegex: String!
  facebookUrl: String!
  contactEmail: String!
  vipBrandId: String!
}

enum Sex {
  UNKNOWN
  MALE
  FEMALE
}

type Singer implements Node {
  id: ID!
  alias: String!
  name: String
  slug: String
  description: String
  imageUrl: String
  likes: SingerLikes!
  songs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: SongOrderByInput
  ): SongConnection!
}

type SingerConnection {
  pageInfo: PageInfo!
  edges: [SingerEdge!]!
  totalCount: Float!
}

type SingerEdge {
  node: Singer!

  """Used in `before` and `after` args"""
  cursor: String!
}

type SingerLikes {
  id: ID!
  totalCount: Float!
  liked: Boolean
}

type Song implements Node {
  id: ID!
  name: String!
  downloadNumber: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String
  singers: [Singer!]!
  genres: [Genre!]!
  fileUrl: String!
  imageUrl: String
  liked: Boolean
  toneFromList(listId: ID): RingBackTone
  songsFromSameSingers(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: SongOrderByInput
  ): SongConnection!
  tones: [RingBackTone!]!
  comments(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: CommentOrderByInput
  ): CommentConnection!
}

type SongConnection {
  pageInfo: PageInfo!
  edges: [SongEdge!]!
  totalCount: Float!
}

type SongEdge {
  node: Song!

  """Used in `before` and `after` args"""
  cursor: String!
}

input SongOrderByInput {
  updatedAt: OrderByDirection
  downloadNumber: OrderByDirection
}

type SongPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: Song
}

type Spam {
  id: ID!
  name: String!
  content: String!
  sendTime: DateTime
  updatedAt: DateTime
  itemType: String
  itemId: String
  item: Node
  seen: Boolean
}

type SpamConnection {
  pageInfo: PageInfo!
  edges: [SpamEdge!]!
  totalCount: Float!
}

type SpamEdge {
  node: Spam!

  """Used in `before` and `after` args"""
  cursor: String!
}

type SpamPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: Spam
}

type StringPayload implements Payload {
  success: Boolean!
  errorCode: String
  message: String
  result: String
}

enum TimeType {
  ALWAYS
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  RANGE
}

type Topic implements Node {
  id: ID!
  name: String!
  slug: String
  description: String
  imageUrl: String
  songs(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: SongOrderByInput
  ): SongConnection!
}

type TopicConnection {
  pageInfo: PageInfo!
  edges: [TopicEdge!]!
  totalCount: Float!
}

type TopicEdge {
  node: Topic!

  """Used in `before` and `after` args"""
  cursor: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UsedTone {
  id: ID!
  used: Boolean!
  tone: RbtDownload!
}
